# This is a build file for huggle (used with cmake)
cmake_minimum_required (VERSION 2.8.7)
#set(CMAKE_CXX_STANDARD 11)
project(huggle)
execute_process(COMMAND "${CMAKE_SOURCE_DIR}/build/prepare_cmake.sh" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.0)
    # Visual Studio
    add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)
endif()
execute_process(COMMAND "${CMAKE_SOURCE_DIR}/update.sh" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
#  cmake <folder> -DQT5_BUILD=true
option(LIBCORE "Build core library" false)
option(PYTHON_BUILD "Build huggle with python" false)
option(QT5_BUILD "Build huggle using the Qt5 framework" false)
option(HUGGLE_EXT "Build huggle extensions" false)

# This will ensure that produced binaries go to right place on windows
if(NOT MINGW AND WIN32)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/Release)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/Debug)
endif()
add_subdirectory(libs/libirc/libirc libirc)
add_subdirectory(libs/libirc/libircclient libircclient)
if (HUGGLE_EXT)
    if(WIN32)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR}/Release/extensions)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR}/Debug/extensions)
    endif()
    if (QT5_BUILD)
        add_subdirectory(extension_list/extension-scoring/)
    endif()
    add_subdirectory(extension_list/extension-thanks/)
    add_subdirectory(extension_list/enwiki/)
    add_subdirectory(extension_list/mass-delivery/)
    add_subdirectory(extension_list/extension-splitter-helper/)
    add_subdirectory(extension_list/extension-mass-delete/)
    if(WIN32 AND NOT MINGW)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE)
    endif() 
endif()
set(QT_USE_QTNETWORK true)
set(QT_USE_QTXML true)
set(QT_USE_QTWEBKIT true)
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_include_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
if(WIN32)
    if(MINGW)
        set(CMAKE_CXX_FLAGS "-mwindows -std=c++11")
    endif()
else()
        set(CMAKE_CXX_FLAGS "-std=c++11")
endif()
#### Qt 4 AND 5 ####
if(QT5_BUILD)
    find_package(Qt5Core REQUIRED)
    find_package(Qt5Gui REQUIRED)
    find_package(Qt5WebKit REQUIRED)
    find_package(Qt5Xml REQUIRED)
    find_package(Qt5Widgets REQUIRED)
    find_package(Qt5Network REQUIRED)
    set(QT_includeS
        ${Qt5Gui_include_DIRS}
        ${Qt5Widgets_include_DIRS}
        ${Qt5Network_include_DIRS}
        ${Qt5WebKit_include_DIRS}
        ${Qt5Xml_include_DIRS}
        ${Qt5Svg_include_DIRS}
    )
    include_directories(${QT_includeS})
else()
    find_package(Qt4 REQUIRED)
endif()
if (PYTHON_BUILD)
    find_package(PythonLibs REQUIRED)
    include_directories(${PYTHON_INCLUDE_DIRS})
endif()

file(GLOB srcx "*.cpp")
file(GLOB resx "*.qrc")
file(GLOB uixx "*.ui")
file(GLOB headers "*.hpp")

set(huggle_SOURCES ${srcx})
set(huggle_FORMS ${uixx})
set(huggle_RESOURCES ${resx})

if(QT5_BUILD)
    QT5_WRAP_CPP(huggle_HEADERS_MOC ${huggle_HEADERS})
    QT5_WRAP_UI(huggle_FORMS_HEADERS ${huggle_FORMS})
    QT5_ADD_RESOURCES(huggle_RESOURCES_RCC ${huggle_RESOURCES})
else()
    QT4_WRAP_CPP(huggle_HEADERS_MOC ${huggle_HEADERS})
    QT4_WRAP_UI(huggle_FORMS_HEADERS ${huggle_FORMS})
    QT4_ADD_RESOURCES(huggle_RESOURCES_RCC ${huggle_RESOURCES})
endif()
if (NOT QT5_BUILD)
    include(${QT_USE_FILE})
endif()
add_definitions(${QT_DEFINITIONS})
add_definitions( -DQT_USE_QSTRINGBUILDER )
if (HUGGLE_EXT OR LIBCORE)
    add_library(core SHARED ${huggle_SOURCES} ${headers} ${huggle_HEADERS_MOC} ${huggle_FORMS_HEADERS} ${huggle_RESOURCES_RCC})
    target_link_libraries(core ${QT_LIBRARIES})
    set_target_properties(core PROPERTIES COMPILE_FLAGS -DHUGGLE_LIBRARY)
endif()
add_executable(huggle ${huggle_SOURCES} ${headers} ${huggle_HEADERS_MOC} ${huggle_FORMS_HEADERS} ${huggle_RESOURCES_RCC})
if (NOT PYTHON_BUILD)
    target_link_libraries(huggle ${QT_LIBRARIES})
else()
    if (WIN32)
        add_executable(py_hug ${huggle_SOURCES} ${headers} ${huggle_HEADERS_MOC} ${huggle_FORMS_HEADERS} ${huggle_RESOURCES_RCC})
        target_link_libraries(huggle ${QT_LIBRARIES})
        target_link_libraries(py_hug ${PYTHON_LIBRARIES} ${QT_LIBRARIES})
        set_target_properties(py_hug PROPERTIES COMPILE_FLAGS -DHUGGLE_PYTHON)
    else()
        add_definitions(-DHUGGLE_PYTHON )
        target_link_libraries(huggle ${PYTHON_LIBRARIES} ${QT_LIBRARIES})
    endif()
endif()
if (WIN32)
    target_link_libraries(huggle dbghelp)
    if (LIBCORE OR HUGGLE_EXT)
        target_link_libraries(core dbghelp)
    endif()
    if (PYTHON_BUILD)
        target_link_libraries(py_hug dbghelp)
    endif()
endif()

target_link_libraries(huggle irc ircclient)

if (LIBCORE OR HUGGLE_EXT)
    target_link_libraries(core irc ircclient)
endif()

if (QT5_BUILD)
    qt5_use_modules(huggle Core Gui Widgets WebKitWidgets WebKit Network Xml)
    if (HUGGLE_EXT OR LIBCORE)
        qt5_use_modules(core Core Gui Widgets WebKitWidgets WebKit Network Xml)
    endif()
    if (PYTHON_BUILD)
        qt5_use_modules(py_hug Core Gui Widgets WebKitWidgets WebKit Network Xml)
    endif()
endif()
include_directories(${CMAKE_CURRENT_BINARY_DIR})
install(FILES ${CMAKE_SOURCE_DIR}/man/huggle.1 DESTINATION share/man/man1)
install(FILES ${CMAKE_SOURCE_DIR}/build/huggle.desktop DESTINATION share/applications)
if (HUGGLE_EXT OR LIBCORE)
    INSTALL(TARGETS core DESTINATION lib)
endif ()
include(${CMAKE_SOURCE_DIR}/CPackInfo)
install(FILES ${CMAKE_SOURCE_DIR}/Resources/huggle3_newlogo.png DESTINATION share/huggle)
install(TARGETS huggle DESTINATION bin)
include(CPack)
